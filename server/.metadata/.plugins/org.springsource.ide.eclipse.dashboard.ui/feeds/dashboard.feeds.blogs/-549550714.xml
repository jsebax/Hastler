<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-05-20T16:28:00Z</updated>
  <entry>
    <title>Webinar Replay: Reactive data-pipelines with Spring XD and Kafka</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/20/webinar-replay-reactive-data-pipelines-with-spring-xd-and-kafka" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-20:2132</id>
    <updated>2015-05-20T16:28:00Z</updated>
    <content type="html">&lt;p&gt;Speakers: Marius Bogoevici &amp;amp; Mark Pollack &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/mbogoevici/reactive-data-pipelines-with-spring-xd-and-kafka"&gt;https://speakerdeck.com/mbogoevici/reactive-data-pipelines-with-spring-xd-and-kafka &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the recent years, drastic increases in data volume as well as a greater demand for low latency have led to a radical shift in business requirements and application development methods. In response to these demands, frameworks such as RxJava and high throughput messaging systems such as Kafka have emerged as key building blocks. However, integrating technologies is never easy and Spring XD provides a solution. Through its development model and runtime, Spring XD makes it easy to develop highly scalable data pipelines, and lets you focus on writing and testing business logic vs. integrating and scaling a big data stack. Come and see how easy this can be in this webinar, where we will demonstrate how to build highly scalable data pipelines with RxJava and Kafka, using Spring XD as a platform. In the recent years, drastic increases in data volume as well as a greater demand for low latency have led to a radical shift in business requirements and application development methods. In response to these demands, frameworks such as RxJava and high throughput messaging systems such as Kafka have emerged as key building blocks. However, integrating technologies is never easy and Spring XD provides a solution. Through its development model and runtime, Spring XD makes it easy to develop highly scalable data pipelines, and lets you focus on writing and testing business logic vs. integrating and scaling a big data stack. Come and see how easy this can be in this webinar, where we will demonstrate how to build highly scalable data pipelines with RxJava and Kafka, using Spring XD as a platform.&lt;/p&gt;
&lt;p&gt; Learn more about Spring XD at http://projects.spring.io/spring-xd&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/nP7Cx4yeZU4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - May 19th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/this-week-in-spring-may-19th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-05-19:2127</id>
    <updated>2015-05-19T23:02:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! As usual, we&amp;rsquo;ve got a&lt;br/&gt;lot to cover this week so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the good Dr. Dave Syer is back it again with this seventh installment on how to better modularize the Angular.js client that talks to a &lt;a href="http://spring.io/blog/2015/05/13/modularizing-the-client-angular-js-and-spring-security-part-vii"&gt;backend Spring Security, Spring Boot, and Spring Security OAuth-powered service&lt;/a&gt; and with this eighth installment which looks &lt;a href="http://spring.io/blog/2015/05/19/testing-an-angular-application-angular-js-and-spring-security-part-viii"&gt;at how to test that Angular.js application&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Security lead and all around amazing, test-driven dude, Rob Winch just &lt;a href="http://spring.io/blog/2015/05/14/spring-test-htmlunit-1-0-0-rc1-released"&gt;announced Spring Test HtmlUnit 1.0.0.RC1&lt;/a&gt; with a lot of new polish.&lt;/li&gt;
  &lt;li&gt;Spring Batch lead Michael Minella &lt;a href="https://spring.io/blog/2015/05/19/spring-batch-3-0-4-release-is-now-available"&gt;just announced that Spring Batch 3.0.4, a maintenance release, is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Social lead Craig Walls just announced that two maintenance releases, &lt;a href="http://spring.io/blog/2015/05/19/spring-social-1-1-2-released"&gt;Spring Social 1.1.2&lt;/a&gt; and &lt;a href="http://spring.io/blog/2015/05/15/spring-social-1-1-1-released"&gt;Spring Social 1.1.1&lt;/a&gt;, have been released&lt;/li&gt;
  &lt;li&gt;On May 28th, join Pivotal&amp;rsquo;s own Greg Turnquist: &lt;a href="http://spring.io/blog/2015/05/05/webinar-debug-and-maintain-your-spring-boot-app"&gt;How to Debug and Maintain your Spring Boot App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Turkcell&amp;rsquo;s Erdem Gunay, and our pal, is giving a webinar on June 9th explaining &lt;a href="http://spring.io/blog/2015/05/06/webinar-a-comprehensive-spring-showcase-personal-cloud-storage-application"&gt;how Spring is pretty comprehensively used in Turkcell&amp;rsquo;s personal cloud service&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;longtime Spring community member &lt;a href="http://stackoverflow.com/questions/30288959/eureka-peers-not-synchronized"&gt;David Welch had a question about setting up a highly available Netflix Eureka installation&lt;/a&gt; and Spring Cloud co-founder Spencer Gibb helped him along on this super useful StackOverflow.com post.&lt;/li&gt;
  &lt;li&gt;Fancy using JUnit &lt;code&gt;@Rule&lt;/code&gt; instances instead of being forced to specify Spring&amp;rsquo;s JUnit &lt;code&gt;TestRunner&lt;/code&gt; (which effectively removes the ability to use &lt;em&gt;other&lt;/em&gt; sometimes required &lt;code&gt;TestRunner&lt;/code&gt; implementations)? Check out the &lt;a href="https://github.com/spring-projects/spring-framework/commit/d1b1c4f888b5ab5c60cf4beb87f577143bdbebe7"&gt;upcoming Spring framework 4.2 support already in master&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;on May 27th the Seattle Continuous Delivery Meetup &lt;a href="http://www.meetup.com/seattle-continuous-delivery/events/222464656/"&gt;is having a Spring Boot talk&lt;/a&gt;! Naturally. Check it out. Spring Boot fits well in a continuous delivery pipeline: it&amp;rsquo;s easy to build isolated, testable, and production-ready applications.&lt;/li&gt;
  &lt;li&gt;Yet another (well done, by the way!) post on how to &lt;a href="https://www.jiwhiz.com/blogs/Spring_Boot_Docker_MySQL_Demo"&gt;setup Spring Boot applications and containerize them with Docker&lt;/a&gt;. Seems this is a popular topic! &lt;a href="http://spring.io/guides/gs/spring-boot-docker/"&gt;Good thing we have a guide&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring and Groovy Tool Suite ninja &lt;a href="http://spring.io/blog/2015/05/11/new-in-sts-3-7-0-spring-boot-yaml-editor"&gt;Kris De Volder announced the STS support for YAML&lt;/a&gt; last week - have you tried it yet?&lt;/li&gt;
  &lt;li&gt;the &lt;em&gt;IS Applications Development Services&lt;/em&gt; blog has a nice post on &lt;a href="http://www.appsdev.is.ed.ac.uk/blog/?p=501"&gt;documenting Spring Boot applications with Swagger&lt;/a&gt;. I like Swagger, but I&amp;rsquo;d recommend also trying out &lt;a href="https://github.com/spring-projects/spring-restdocs"&gt;Spring REST Docs&lt;/a&gt; which are less invasive - they live in the unit-tests - &lt;em&gt;and&lt;/em&gt; they&amp;rsquo;re Asciidoctor-friendly.&lt;/li&gt;
  &lt;li&gt;Wow, were are finally out of SpringOne2GX replays! This is the last batch, mostly Groovy and Grails. First, Baruch Sadogursky from JFrog talks about &lt;a href="http://spring.io/blog/2015/05/19/springone2gx-2014-replay-grails-plugin-testing-strategies"&gt;Grails Plugin Testing Strategies&lt;/a&gt;. Then David Dawson, from Simplicity Itself talks about &lt;a href="http://spring.io/blog/2015/05/19/springone2gx-2014-replay-philosophical-architecture-in-grails"&gt;Philosophical Architecture in Grails&lt;/a&gt;. Also, Ken Kousen &lt;a href="http://spring.io/blog/2015/05/19/springone2gx-2014-replay-groovy-vampires-combining-groovy-rest-nosql-and-more"&gt;Groovy Vampires: Combining Groovy, REST, NoSQL, and more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 3.0.4.RELEASE is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/spring-batch-3-0-4-release-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Michael Minella</name>
    </author>
    <id>tag:spring.io,2015-05-19:2126</id>
    <updated>2015-05-19T22:36:53Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Batch 3.0.4.RELEASE is now available via Maven Central, Github and the SpringSource download repository. This is the 4th maintenance release for the 3.0.x branch of Spring Batch and addresses a number of bugs and a few minor enhancements. Many thanks to all of those who submitted the many &lt;a href="https://github.com/springsource/spring-batch/pulls"&gt;pull requests&lt;/a&gt; that went into this release.&lt;/p&gt;&lt;p&gt;&lt;a href="http://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-batch/"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We look forward to your feedback in &lt;a href="https://jira.spring.io/browse/BATCH"&gt;Jira&lt;/a&gt;, &lt;a href="http://stackoverflow.com/questions/tagged/spring-batch"&gt;StackOverflow&lt;/a&gt;, or to me directly via Twitter &lt;a href="twitter.com/michaelminella"&gt;@michaelminella&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Social 1.1.2 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/spring-social-1-1-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2015-05-19:2125</id>
    <updated>2015-05-19T20:03:16Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m pleased to announce the availability of Spring Social 1.1.2.RELEASE. This includes Spring Social&amp;rsquo;s core, web, security, and config modules. This release fixes a dependency issue from last week&amp;rsquo;s 1.1.1.RELEASE.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-social/core.html"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.2.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.2.RELEASE/apidocs/"&gt;JavaDoc&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Philosophical Architecture in Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/springone2gx-2014-replay-philosophical-architecture-in-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-20:2131</id>
    <updated>2015-05-19T17:02:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: David Dawson, Simplicity Itself &lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/s2gx-philosophicalarchitecture"&gt;http://www.slideshare.net/SpringCentral/s2gx-philosophicalarchitecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Software development is hard. Life is hard. We try to keep up with a changing world, and it's hard. Where though, does the problem lie? In this talk, David, CEO at Simplicity Itself, will describe a different way of approaching the problem of software development, a different way of trying to keep up with a changing world. This is not a soft talk, all opinions are backed up by cold hard code in a running Grails application, showing how a change in the way you think can radically change your software.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/nx8XMY7evbA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Groovy Vampires: Combining Groovy, REST, NoSQL, and more</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/springone2gx-2014-replay-groovy-vampires-combining-groovy-rest-nosql-and-more" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-19:2130</id>
    <updated>2015-05-19T16:52:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Kenneth Kousen &lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/groovy-vampires"&gt;http://www.slideshare.net/SpringCentral/groovy-vampires&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If a book as horrible as Twilight can sell millions of copies and be made into an even worse movie, how many copies can a book with Groovy vampires sell? (Spoiler: Not as many.) Yes, this topic may be silly, but the technologies used (Groovy, Ratpack, MongoDB, Grails, REST) are (un)deadly serious. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/hwH1PK94PKw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Grails Plugin Testing Strategies</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/springone2gx-2014-replay-grails-plugin-testing-strategies" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-19:2128</id>
    <updated>2015-05-19T16:46:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Baruch Sadogursky, JFrog &lt;/p&gt;
&lt;p&gt;Slides: No slides, Baruch is 100% demo, baby&lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics&lt;/p&gt;
&lt;p&gt; Maintaining Grails plugins can be a real challenge given the high expectations and demands. Apart from supporting many users, you're tasked with making sure that the plugin is compatible with a range of Grails versions - both old and new. Your plugin must also be compatible with multiple development environments (OSs, SDKs, etc,) and play nice with the wealth of other plugins that exist in the ecosystem. How can we make sure that all these high standards are met? Testing, and lot's of it!&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/NxWw4Zacg-c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Testing an Angular Application: Angular JS and Spring Security Part VIII</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/19/testing-an-angular-application-angular-js-and-spring-security-part-viii" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-04-26:2097</id>
    <updated>2015-05-19T15:25:00Z</updated>
    <content type="html">&lt;p&gt;In this article we continue &lt;a href="https://spring.io/blog/2015/05/13/modularizing-the-client-angular-js-and-spring-security-part-vii" title="Seventh Article in the Series"&gt;our discussion&lt;/a&gt; of how to use &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt; with &lt;a href="http://angularjs.org"&gt;Angular JS&lt;/a&gt; in a &amp;ldquo;single page application&amp;rdquo;. Here we show how to write and run unit tests for the client-side code using the Javascript test framework &lt;a href="http://jasmine.github.io/2.0/introduction.html"&gt;Jasmine&lt;/a&gt;. This is the eighth in a series of articles, and you can catch up on the basic building blocks of the application or build it from scratch by reading the &lt;a href="https://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;first article&lt;/a&gt;, or you can just go straight to the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/basic"&gt;source code in Github&lt;/a&gt; (the same source code as Part I, but with tests now added). This article actually has very little code using Spring or Spring Security, but it covers the client-side testing in a way that might not be so easy to find in the usual Javascript community resources, and one which we feel will be comfortable for the majority of Spring users.&lt;/p&gt;&lt;p&gt;As with the rest of this series, the build tools are typical for Spring users, and not so much for experienced front-end developers. Thus we look for solutions that can be used from a Java IDE, and on the command line with familiar Java build tools. If you already know about Jasmine and Javascript testing, and you are happy using a Node.js based toolchain (e.g. &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;grunt&lt;/code&gt; etc.), then you probably can skip this article completely. If you are more comfortable in Eclipse or IntelliJ, and would prefer to use the same tools for your front end as for the back end, then this article will be of interest. When we need a command line (e.g. for continuous integration), we use Maven in the examples here, but Gradle users will probably find the same code easy to integrate.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reminder: if you are working through this section with the sample application, be sure to clear your browser cache of cookies and HTTP Basic credentials. In Chrome the best way to do that for a single server is to open a new incognito window.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#writing-a-specification-in-jasmine" class="anchor" name="writing-a-specification-in-jasmine"&gt;&lt;/a&gt;Writing a Specification in Jasmine&lt;/h2&gt;&lt;p&gt;Our &amp;ldquo;home&amp;rdquo; controller in the &amp;ldquo;basic&amp;rdquo; application is very simple, so it won&amp;rsquo;t take a lot to test it thoroughly. Here&amp;rsquo;s a reminder of the code (&lt;code&gt;hello.js&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, []).controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
  $http.get(&amp;#39;resource/&amp;#39;).success(function(data) {&#xD;
    $scope.greeting = data;&#xD;
  })&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main challenge we face is to provide the &lt;code&gt;$scope&lt;/code&gt; and &lt;code&gt;$http&lt;/code&gt; objects in the test, so we can make assertions about how they are used in the controller. Actually, even before we face that challenge we need to be able to create a controller instance, so we can test what happens when it loads. Here&amp;rsquo;s how you can do that.&lt;/p&gt;&lt;p&gt;Create a new file &lt;code&gt;spec.js&lt;/code&gt; and put it in &amp;ldquo;src/test/resources/static/js&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;describe(&amp;quot;App&amp;quot;, function() {&#xD;
&#xD;
	beforeEach(module(&amp;#39;hello&amp;#39;));&#xD;
&#xD;
    var $controller;&#xD;
	beforeEach(inject(function($injector) {&#xD;
		$controller = $injector.get(&amp;#39;$controller&amp;#39;);&#xD;
	}));&#xD;
&#xD;
	it(&amp;quot;loads a controller&amp;quot;, function() {&#xD;
		var controller = $controller(&amp;#39;home&amp;#39;)&#xD;
	});&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this very basic test suite we have 3 important elements:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;p&gt;We &lt;code&gt;describe()&lt;/code&gt; the thing that is being tested (the &amp;ldquo;App&amp;rdquo; in this case) with a function.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Inside that function we provide a couple of &lt;code&gt;beforeEach()&lt;/code&gt; callbacks, one of which loads the Angular module &amp;ldquo;hello&amp;rdquo;, and the other of which creates a factory for controllers, which we call &lt;code&gt;$controller&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Behaviour is expressed through a call to &lt;code&gt;it()&lt;/code&gt;, where we state in words what the expectation is, and then provide a function that makes assertions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The test function here is so trivial it actually doesn&amp;rsquo;t even make assertions, but it does create an instance of the &amp;ldquo;home&amp;rdquo; controller, so if that fails then the test will fail.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: &amp;ldquo;src/test/resources/static/js&amp;rdquo; is a logical place for test code in a Java application, although a case could be made for &amp;ldquo;src/test/javascript&amp;rdquo;. We will see later why it makes sense to put it in the test classpath, though (indeed if you are used to Spring Boot conventions you may already see why).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Now we need a driver for this Javascript code, in the form of an HTML page that we coudl load in a browser. Create a file called &amp;ldquo;test.html&amp;rdquo; and put it in &amp;ldquo;src/test/resources/static&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;!doctype html&amp;gt;&#xD;
&amp;lt;html&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&#xD;
&amp;lt;title&amp;gt;Jasmine Spec Runner&amp;lt;/title&amp;gt;&#xD;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&#xD;
  href=&amp;quot;/webjars/jasmine/2.0.0/jasmine.css&amp;quot;&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/webjars/jasmine/2.0.0/jasmine.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&#xD;
  src=&amp;quot;/webjars/jasmine/2.0.0/jasmine-html.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/webjars/jasmine/2.0.0/boot.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&#xD;
&amp;lt;!-- include source files here... --&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/js/angular-bootstrap.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/js/hello.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&#xD;
&amp;lt;!-- include spec files here... --&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&#xD;
  src=&amp;quot;/webjars/angularjs/1.3.8/angular-mocks.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/js/spec.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&#xD;
&amp;lt;/head&amp;gt;&#xD;
&#xD;
&amp;lt;body&amp;gt;&#xD;
&amp;lt;/body&amp;gt;&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The HTML is content free, but it loads some Javascript, and it will have a UI once the scripts all run.&lt;/p&gt;&lt;p&gt;First we load the required Jasmine components from &lt;code&gt;/webjars/**&lt;/code&gt;. The 4 files that we load are just boilerplate - you can do the same thing for any application. To make those available at runtime in a test we will need to add the Jasmine dependency to our &amp;ldquo;pom.xml&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;jasmine&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
 ```&#xD;
&#xD;
Then we come to the application-specific code. The main source code for our front end is &amp;quot;hello.js&amp;quot; so we have to load that, and also its dependencies in the form of &amp;quot;angular-bootstrap.js&amp;quot; (the latter is created by the wro4j maven plugin, so you need to run `mvn package` once successfully before it is loadable).&#xD;
&#xD;
Finally we need the &amp;quot;spec.js&amp;quot; that we jsut wrote, and its dependencies (any that are not already included the the other scripts), which for an Angular application will nearly always include the &amp;quot;angular-mocks.js&amp;quot;. We load it from webjars, so you will also need to add that dependency to &amp;quot;pom.xml&amp;quot;:&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;dependency&gt;&lt;br/&gt; &lt;groupId&gt;org.webjars&lt;/groupId&gt;&lt;br/&gt; &lt;artifactId&gt;angularjs&lt;/artifactId&gt;&lt;br/&gt; &lt;version&gt;1.3.8&lt;/version&gt;&lt;br/&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;br/&gt;&lt;/dependency&gt;&lt;br/&gt; ```&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;NOTE: The angularjs webjar was already included as a dependency of the wro4j plugin, so that it could build the &amp;ldquo;angular-bootstrap.js&amp;rdquo;. This is going to be used in a different build step, so we need it again.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#running-the-specs" class="anchor" name="running-the-specs"&gt;&lt;/a&gt;Running the Specs&lt;/h2&gt;&lt;p&gt;To run our &amp;ldquo;test.html&amp;rdquo; code we need a tiny application (e.g. in &amp;ldquo;src/test/java/test&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@SpringBootApplication&#xD;
@Controller&#xD;
public class TestApplication {&#xD;
&#xD;
	@RequestMapping(&amp;quot;/&amp;quot;)&#xD;
	public String home() {&#xD;
		return &amp;quot;forward:/test.html&amp;quot;;&#xD;
	}&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		new SpringApplicationBuilder(TestApplication.class).properties(&#xD;
				&amp;quot;server.port=9999&amp;quot;, &amp;quot;security.basic.enabled=false&amp;quot;).run(args);&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;TestApplication&lt;/code&gt; is pure boilerplate: all applications could run tests the same way. You can run it in your IDE and visit &lt;a href="http://localhost:9999"&gt;http://localhost:9999&lt;/a&gt; to see the Javascript running. The one &lt;code&gt;@RequestMapping&lt;/code&gt; we provided just makes the home page display out test HTML. All (one) tests should be green.&lt;/p&gt;&lt;p&gt;Your developer workflow from here would be to make a change to Javascript code and reload the test application in your browser to run the tests. So simple!&lt;/p&gt;&lt;h2&gt;&lt;a href="#improving-the-unit-test-mocking-http-backend" class="anchor" name="improving-the-unit-test-mocking-http-backend"&gt;&lt;/a&gt;Improving the Unit Test: Mocking HTTP Backend&lt;/h2&gt;&lt;p&gt;To improve the spec to production grade we need to actually assert something about what happens when the controller loads. Since it makes a call to &lt;code&gt;$http.get()&lt;/code&gt; we need to mock that call to avoid having to run the whole application just for a unit test. To do that we use the Angular &lt;code&gt;$httpBackend&lt;/code&gt; (in &amp;ldquo;spec.js&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;describe(&amp;quot;App&amp;quot;, function() {&#xD;
&#xD;
  beforeEach(module(&amp;#39;hello&amp;#39;));&#xD;
&#xD;
  var $httpBackend, $controller;&#xD;
  beforeEach(inject(function($injector) {&#xD;
    $httpBackend = $injector.get(&amp;#39;$httpBackend&amp;#39;);&#xD;
    $controller = $injector.get(&amp;#39;$controller&amp;#39;);&#xD;
  }));&#xD;
&#xD;
  afterEach(function() {&#xD;
    $httpBackend.verifyNoOutstandingExpectation();&#xD;
    $httpBackend.verifyNoOutstandingRequest();&#xD;
  });&#xD;
&#xD;
  it(&amp;quot;says Hello Test when controller loads&amp;quot;, function() {&#xD;
    var $scope = {};&#xD;
    $httpBackend.expectGET(&amp;#39;resource/&amp;#39;).respond(200, {&#xD;
      id : 4321,&#xD;
      content : &amp;#39;Hello Test&amp;#39;&#xD;
    });&#xD;
    var controller = $controller(&amp;#39;home&amp;#39;, {&#xD;
      $scope : $scope&#xD;
    });&#xD;
    $httpBackend.flush();&#xD;
    expect($scope.greeting.content).toEqual(&amp;#39;Hello Test&amp;#39;);&#xD;
  });&#xD;
&#xD;
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The new pieces here are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;p&gt;The creation of the &lt;code&gt;$httpBackend&lt;/code&gt; in a &lt;code&gt;beforeEach()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;Adding a new &lt;code&gt;afterEach()&lt;/code&gt; that verifies the state of the backend.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;In the test function we set expectations for the backend before we create the controller, telling it to expect a call to &amp;lsquo;resource/&amp;rsquo;,and what the response should be.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;&lt;p&gt;We also add a call to jasmine &lt;code&gt;expect()&lt;/code&gt; to assert the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Without having to start and stop the test application, this test should now be green in the browser.&lt;/p&gt;&lt;h2&gt;&lt;a href="#running-specs-on-the-command-line" class="anchor" name="running-specs-on-the-command-line"&gt;&lt;/a&gt;Running Specs on the Command Line&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s great to be able to run specs in a browser, because there are excellent developer tools built into modern browsers (e.g. F12 in Chrome). You can set breakpoints and inspect variables, and well as being able to refresh the view to re-run your tests in a live server. But this won&amp;rsquo;t help you with continuous integration: for that you need a way to run the tests from a command line. There is tooling available for whatever build tools you prefer to use, but since we are using Maven here, we will add a plugin to the &amp;ldquo;pom.xml&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;plugin&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;com.github.searls&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;jasmine-maven-plugin&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;2.0-alpha-01&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;executions&amp;gt;&#xD;
    &amp;lt;execution&amp;gt;&#xD;
      &amp;lt;goals&amp;gt;&#xD;
        &amp;lt;goal&amp;gt;test&amp;lt;/goal&amp;gt;&#xD;
      &amp;lt;/goals&amp;gt;&#xD;
    &amp;lt;/execution&amp;gt;&#xD;
  &amp;lt;/executions&amp;gt;&#xD;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The default settings for this plugin won&amp;rsquo;t work with the static resource layout that we already made, so we need a bit of configuration for that:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;plugin&amp;gt;&#xD;
  ...&#xD;
  &amp;lt;configuration&amp;gt;&#xD;
    &amp;lt;additionalContexts&amp;gt;&#xD;
      &amp;lt;context&amp;gt;&#xD;
        &amp;lt;contextRoot&amp;gt;/lib&amp;lt;/contextRoot&amp;gt;&#xD;
        &amp;lt;directory&amp;gt;${project.build.directory}/generated-resources/static/js&amp;lt;/directory&amp;gt;&#xD;
      &amp;lt;/context&amp;gt;&#xD;
    &amp;lt;/additionalContexts&amp;gt;&#xD;
    &amp;lt;preloadSources&amp;gt;&#xD;
      &amp;lt;source&amp;gt;/lib/angular-bootstrap.js&amp;lt;/source&amp;gt;&#xD;
      &amp;lt;source&amp;gt;/webjars/angularjs/1.3.8/angular-mocks.js&amp;lt;/source&amp;gt;&#xD;
    &amp;lt;/preloadSources&amp;gt;&#xD;
    &amp;lt;jsSrcDir&amp;gt;${project.basedir}/src/main/resources/static/js&amp;lt;/jsSrcDir&amp;gt;&#xD;
    &amp;lt;jsTestSrcDir&amp;gt;${project.basedir}/src/test/resources/static/js&amp;lt;/jsTestSrcDir&amp;gt;&#xD;
    &amp;lt;webDriverClassName&amp;gt;org.openqa.selenium.phantomjs.PhantomJSDriver&amp;lt;/webDriverClassName&amp;gt;&#xD;
  &amp;lt;/configuration&amp;gt;&#xD;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the &lt;code&gt;webDriverClassName&lt;/code&gt; is specified as &lt;code&gt;PhantomJSDriver&lt;/code&gt;, which means you need &lt;code&gt;phantomjs&lt;/code&gt; to be on your &lt;code&gt;PATH&lt;/code&gt; at runtime. This works out of the box in &lt;a href="https://travis-ci.org"&gt;Travis CI&lt;/a&gt;, and requires a simple installation in Linux, MacOS and Windows - you can &lt;a href="http://phantomjs.org/download.html"&gt;download binaries&lt;/a&gt; or use a package manager, like &lt;code&gt;apt-get&lt;/code&gt; on Ubuntu for instance. In principle, any Selenium web driver can be used here (and the default is &lt;code&gt;HtmlUnitDriver&lt;/code&gt;), but PhantomJS is probably the best one to use for an Angular application.&lt;/p&gt;&lt;p&gt;We also need to make the Angular library available to the plugin so it can load that &amp;ldquo;angular-mocks.js&amp;rdquo; dependency:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;plugin&amp;gt;&#xD;
  ...&#xD;
  &amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;org.webjars&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;angularjs&amp;lt;/artifactId&amp;gt;&#xD;
      &amp;lt;version&amp;gt;1.3.8&amp;lt;/version&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
  &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it. All boilerplate again (so it can go in a parent pom if you want to share the code between multiple projects). Just run it on the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ mvn jasmine:test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The tests also run as part of the Maven &amp;ldquo;test&amp;rdquo; lifecycle, so you can just run &lt;code&gt;mvn test&lt;/code&gt; to run all the Java tests as well as the Javascript ones, slotting very smoothly into your existing build and deployment cycle. Here&amp;rsquo;s the log:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ mvn test&#xD;
...&#xD;
[INFO] &#xD;
-------------------------------------------------------&#xD;
 J A S M I N E   S P E C S&#xD;
-------------------------------------------------------&#xD;
[INFO] &#xD;
App&#xD;
  says Hello Test when controller loads&#xD;
&#xD;
Results: 1 specs, 0 failures&#xD;
&#xD;
[INFO] ------------------------------------------------------------------------&#xD;
[INFO] BUILD SUCCESS&#xD;
[INFO] ------------------------------------------------------------------------&#xD;
[INFO] Total time: 21.064s&#xD;
[INFO] Finished at: Sun Apr 26 14:46:14 BST 2015&#xD;
[INFO] Final Memory: 47M/385M&#xD;
[INFO] ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Jasmine Maven plugin also comes with a goal &lt;code&gt;mvn jasmine:bdd&lt;/code&gt; that runs a server that you can load in your browser to run the tests (as an alternative to the &lt;code&gt;TestApplication&lt;/code&gt; above).&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Being able to run unit tests for Javascript is important in a modern web application and it&amp;rsquo;s a topic that we&amp;rsquo;ve ignored (or dodged) up to now in this series. With this installment we have presented the basic ingredients of how to write the tests, how to run them at development time and also, importantly, in a continuous integration setting. The approach we have taken is not going to suit everyone, so please don&amp;rsquo;t feel bad about doing it in a different way, but make sure you have all those ingredients. The way we did it here will probably feel comfortable to traditional Java enterprise developers, and integrates well with their existing tools and processes, so if you are in that category I hope you will find it useful as a starting point. More examples of testing with Angular and Jasmine can be found in plenty of places on the internet, but the first point of call might be the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/single"&gt;&amp;ldquo;single&amp;rdquo; sample&lt;/a&gt; from this series, which now has some up to date test code which is a bit less trivial than the code we needed to write for the &amp;ldquo;basic&amp;rdquo; sample in this article.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Social 1.1.1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/15/spring-social-1-1-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2015-05-15:2124</id>
    <updated>2015-05-15T15:03:03Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;&lt;p&gt;I&amp;rsquo;m pleased to announce the availability of Spring Social 1.1.1.RELEASE. This is a maintenance release, addressing a handful of bugs and introducing a few minor improvements. View the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10481&amp;version=14658"&gt;release notes&lt;/a&gt; for full details.&lt;/p&gt;&lt;p&gt;Compatibility note: In order to fix a &lt;a href="https://jira.spring.io/browse/SOCIAL-467"&gt;serialization issue&lt;/a&gt; when using ProviderSignInUtils, a minor breaking change was necessary. ProviderSignInAttempt no longer carries its own ConnectionFactoryLocator and UsersConnectionRepository. Those must now be passed in as parameters when instantiating ProviderSignInUtils.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-social/core.html"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.1.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-social/docs/1.1.1.RELEASE/apidocs/"&gt;JavaDoc&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Test HtmlUnit 1.0.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/14/spring-test-htmlunit-1-0-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2015-05-12:2118</id>
    <updated>2015-05-14T14:23:38Z</updated>
    <content type="html">&lt;p&gt;I&amp;rsquo;m pleased to announce the release of &lt;a href="http://projects.spring.io/spring-test-htmlunit/"&gt;Spring Test HtmlUnit&lt;/a&gt; 1.0.0 RC1. The highlights of the release can be found below:&lt;/p&gt;&lt;h2&gt;&lt;a href="#migration-guide" class="anchor" name="migration-guide"&gt;&lt;/a&gt;Migration Guide&lt;/h2&gt;&lt;p&gt;A detailed &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/#migrating-from-1-0-0-m2-to-1-0-0-rc1"&gt;migration guide from 1.0.0.M2 to 1.0.0.RC1&lt;/a&gt; was added.&lt;/p&gt;&lt;h2&gt;&lt;a href="#new-maven-coordinates" class="anchor" name="new-maven-coordinates"&gt;&lt;/a&gt;New Maven Coordinates&lt;/h2&gt;&lt;p&gt;We have changed the maven group id. For details refer to &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/#updating-dependencies"&gt;Updating Dependencies&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#default-context-path-is-quot-quot" class="anchor" name="default-context-path-is-quot-quot"&gt;&lt;/a&gt;Default Context Path is &amp;quot;&amp;quot;&lt;/h2&gt;&lt;p&gt;Based upon community feedback, the default context path is now &amp;quot;&amp;quot;. This means if you are using a previous release, you will need to update the URL that is configured.&lt;/p&gt;&lt;p&gt;For details refer to &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/#default-context-path-is-now"&gt;Default Context Path is now &amp;quot;&amp;quot;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#mockmvc-webclient-amp-webdriver-builders" class="anchor" name="mockmvc-webclient-amp-webdriver-builders"&gt;&lt;/a&gt;MockMvc WebClient &amp;amp; WebDriver Builders&lt;/h2&gt;&lt;p&gt;This release adds builders for MockMvc and HtmlUnit integration. The builders provide a number of benefits:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Simplify the setup&lt;/li&gt;
  &lt;li&gt;Allow for more configuration options&lt;/li&gt;
  &lt;li&gt;By default any URL that has a host of localhost is processed by MockMvc (i.e. &lt;a href="http://localhost/something"&gt;http://localhost/something&lt;/a&gt;) while any other host is retrieved normally (i.e. &lt;a href="http://cdn.example.com/jquery.js)"&gt;http://cdn.example.com/jquery.js)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For details refer to &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/#mockmvc-webclient-webdriver-builders"&gt;MockMvc WebClient &amp;amp; WebDriver Builders&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#new-project-site-amp-documentation" class="anchor" name="new-project-site-amp-documentation"&gt;&lt;/a&gt;New Project Site &amp;amp; Documentation&lt;/h2&gt;&lt;p&gt;We have added a new &lt;a href="http://projects.spring.io/spring-test-htmlunit/"&gt;Project Site&lt;/a&gt;. We have also released &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/"&gt;documentation&lt;/a&gt; in which all code is tested.&lt;/p&gt;&lt;h2&gt;&lt;a href="#forwarded-urls-now-processed" class="anchor" name="forwarded-urls-now-processed"&gt;&lt;/a&gt;Forwarded URLs now processed&lt;/h2&gt;&lt;p&gt;Forwarded URLs are now processed properly.&lt;/p&gt;&lt;h1&gt;&lt;a href="#feedback-please" class="anchor" name="feedback-please"&gt;&lt;/a&gt;Feedback Please&lt;/h1&gt;&lt;p&gt;If you have feedback, I encourage you to reach out via &lt;a href="https://github.com/spring-projects/spring-test-htmlunit/issues"&gt;github issues&lt;/a&gt;, via the comments section, or ping me on twitter &lt;a href="http://twitter.com/rob_winch"&gt;@rob_winch&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If all goes well, we plan to go GA in July.&lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-test-htmlunit/"&gt;Project Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-test-htmlunit/docs/1.0.0.RC1/reference/html5/"&gt;Reference&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-test-htmlunit/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-test-htmlunit/issues?utf8=%E2%9C%93&amp;q=+is%3Aissue+milestone%3A1.0.0.RC1+"&gt;Changelog&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Modularizing the Client: Angular JS and Spring Security Part VII</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/13/modularizing-the-client-angular-js-and-spring-security-part-vii" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-04-16:2084</id>
    <updated>2015-05-13T14:50:00Z</updated>
    <content type="html">&lt;p&gt;In this article we continue &lt;a href="https://spring.io/blog/2015/03/23/multiple-ui-applications-and-a-gateway-single-page-application-with-spring-and-angular-js-part-vi" title="Sixth Article in the Series"&gt;our discussion&lt;/a&gt; of how to use &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt; with &lt;a href="http://angularjs.org"&gt;Angular JS&lt;/a&gt; in a &amp;ldquo;single page application&amp;rdquo;. Here we show how to modularize the client-side code, and how to use &amp;ldquo;nice&amp;rdquo; URL paths without the fragment notation (e.g. &amp;ldquo;/#/login&amp;rdquo;) which Angular uses by default, but most users dislike. This is the seventh in a series of articles, and you can catch up on the basic building blocks of the application or build it from scratch by reading the &lt;a href="https://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;first article&lt;/a&gt;, or you can just go straight to the &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/modular"&gt;source code in Github&lt;/a&gt;. We will be able to tidy up a lot of loose ends from the JavaScript code of the rest of this series, and at the same time show how it can fit very snugly against a backend server built from Spring Security and Spring Boot.&lt;/p&gt;&lt;h2&gt;&lt;a href="#breaking-up-the-application" class="anchor" name="breaking-up-the-application"&gt;&lt;/a&gt;Breaking up the Application&lt;/h2&gt;&lt;p&gt;The sample application that we worked with so far in this series was trivial enough that we could get away with a single JavaScript source file for the whole thing. No larger application will ever end up that way, even if it starts out life like this one, so to mimic real life in a sample we are going to break things up. A good starting point would be to take the &amp;ldquo;single&amp;rdquo; application from &lt;a href="https://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II&lt;/a&gt; and have a look at its structure in the source code. Here&amp;rsquo;s a directory listing for the static content (excluding the &amp;ldquo;application.yml&amp;rdquo; that belongs on the server):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;static/&#xD;
 js/&#xD;
   hello.js&#xD;
 home.html&#xD;
 login.html&#xD;
 index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a few problems with this. One is obvious: all the JavaScript is in a single file (&lt;code&gt;hello.js&lt;/code&gt;). Another is more subtle: we have HTML &amp;ldquo;partials&amp;rdquo; for views inside our application (&amp;ldquo;login.html&amp;rdquo; and &amp;ldquo;home.html&amp;rdquo;) but they are all in a flat structure and not associated with the controller code that uses them.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s take a closer look at the JavaScript and we will see that Angular makes it easy for us to break it up into more manageable pieces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39; ]).config(&#xD;
&#xD;
  function($routeProvider, $httpProvider) {&#xD;
&#xD;
    $routeProvider.when(&amp;#39;/&amp;#39;, {&#xD;
      templateUrl : &amp;#39;home.html&amp;#39;,&#xD;
      controller : &amp;#39;home&amp;#39;&#xD;
    }).when(&amp;#39;/login&amp;#39;, {&#xD;
      templateUrl : &amp;#39;login.html&amp;#39;,&#xD;
      controller : &amp;#39;navigation&amp;#39;&#xD;
    }).otherwise(&amp;#39;/&amp;#39;);&#xD;
&#xD;
    ...&#xD;
&#xD;
}).controller(&amp;#39;navigation&amp;#39;,&#xD;
    function($rootScope, $scope, $http, $location, $route) {&#xD;
      ...&#xD;
}).controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
    ...&#xD;
  })&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is some &amp;ldquo;config&amp;rdquo; and there are 2 controllers (&amp;ldquo;home&amp;rdquo; and &amp;ldquo;navigation&amp;rdquo;), and the controllers seem to map nicely to the partials (&amp;ldquo;home.html&amp;rdquo; and &amp;ldquo;login.html&amp;rdquo; respectively). So let&amp;rsquo;s break them out into those pieces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;static/&#xD;
  js/&#xD;
    home/&#xD;
      home.js&#xD;
      home.html&#xD;
    navigation/&#xD;
      navigation.js&#xD;
      login.html&#xD;
    hello.js&#xD;
  index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The controller definitions have moved into their own modules, alongside the HTML that they need to operate - nice and modular. If we had needed images or custom stylesheets we would have done the same with those.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: all the client-side code is under a single directory, &amp;ldquo;js&amp;rdquo; (except &lt;code&gt;index.html&lt;/code&gt; because that is a &amp;ldquo;welcome&amp;rdquo; page and loads automatically from the &amp;ldquo;static&amp;rdquo; directory). This is intentional because it makes it easy to apply a single Spring Security access rule to all the static resources. These ones are all unsecured (because &lt;code&gt;/js/**&lt;/code&gt; is unsecure by default in a Spring Boot application), but you might need other rules for other applications, in which case you would pick a different path.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;For example, here&amp;rsquo;s the &lt;code&gt;home.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;home&amp;#39;, []).controller(&amp;#39;home&amp;#39;, function($scope, $http) {&#xD;
	$http.get(&amp;#39;/user/&amp;#39;).success(function(data) {&#xD;
		$scope.user = data.name;&#xD;
	});&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and here&amp;rsquo;s the new &lt;code&gt;hello.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular&#xD;
    .module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39;, &amp;#39;home&amp;#39;, &amp;#39;navigation&amp;#39; ])&#xD;
    .config(&#xD;
&#xD;
        function($routeProvider, $httpProvider) {&#xD;
&#xD;
          $routeProvider.when(&amp;#39;/&amp;#39;, {&#xD;
            templateUrl : &amp;#39;js/home/home.html&amp;#39;,&#xD;
            controller : &amp;#39;home&amp;#39;&#xD;
          }).when(&amp;#39;/login&amp;#39;, {&#xD;
            templateUrl : &amp;#39;js/navigation/login.html&amp;#39;,&#xD;
            controller : &amp;#39;navigation&amp;#39;&#xD;
          }).otherwise(&amp;#39;/&amp;#39;);&#xD;
&#xD;
          $httpProvider.defaults.headers.common[&amp;#39;X-Requested-With&amp;#39;] = &amp;#39;XMLHttpRequest&amp;#39;;&#xD;
&#xD;
        });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice how the &amp;ldquo;hello&amp;rdquo; module &lt;em&gt;depends on&lt;/em&gt; the other two by listing them in the initial declaration along with &lt;code&gt;ngRoute&lt;/code&gt;. To make that work you just need to load the module definitions in the right order in &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;...&#xD;
&amp;lt;script src=&amp;quot;js/angular-bootstrap.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;js/home/home.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;js/navigation/navigation.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
&amp;lt;script src=&amp;quot;js/hello.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is the Angular JS dependency management system in action. Other frameworks have similar (and arguably superior) features. Also, in a larger application, you might use a build time step to bundle all the JavaScript together so it can be loaded efficiently by the browser, but that&amp;rsquo;s almost a matter of taste.&lt;/p&gt;&lt;h2&gt;&lt;a href="#using-ldquo-natural-rdquo-routes" class="anchor" name="using-ldquo-natural-rdquo-routes"&gt;&lt;/a&gt;Using &amp;ldquo;Natural&amp;rdquo; Routes&lt;/h2&gt;&lt;p&gt;The Angular &lt;code&gt;$routeProvider&lt;/code&gt; by default works with fragment locators in the URL path, e.g. the login page is specified as a route in &lt;code&gt;hello.js&lt;/code&gt; as &amp;ldquo;/login&amp;rdquo; and this translates into &amp;ldquo;/#/login&amp;rdquo; in the actual URL (the one you see in the browser window). This is so that the JavaScript in the &lt;code&gt;index.html&lt;/code&gt;, loaded via the root path &amp;ldquo;/&amp;rdquo;, stays active on all routes. The fragment naming is a bit unfamiliar to users and it is sometimes more convenient to use &amp;ldquo;natural&amp;rdquo; routes, where the URL path is the same as the Angular route declarations, e.g. &amp;ldquo;/login&amp;rdquo; for &amp;ldquo;/login&amp;rdquo;. You can&amp;rsquo;t do that if you have &lt;em&gt;only&lt;/em&gt; static resources, because &lt;code&gt;index.html&lt;/code&gt; can only be loaded one way, but if you have some active components in the stack (a proxy or some server-side logic) then you can arrange for it to work by loading &lt;code&gt;index.html&lt;/code&gt; from all the Angular routes.&lt;/p&gt;&lt;p&gt;In this series you have Spring Boot, so of course you have server-side logic, and using a simple Spring MVC controller you can naturalize the routes in your application. All you need is a a way to enumerate the Angular routes in the server. Here we choose to do it by a naming convention: all paths that do not contain a period (and are not explicitly mapped already) are Angular routes, and should forward to the home page:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RequestMapping(value = &amp;quot;/{[path:[^\\.]*}&amp;quot;)&#xD;
public String redirect() {&#xD;
  return &amp;quot;forward:/&amp;quot;;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method just needs to be in a &lt;code&gt;@Controller&lt;/code&gt; (not a &lt;code&gt;@RestController&lt;/code&gt;) somewhere in the Spring application. We use a &amp;ldquo;forward&amp;rdquo; (not a &amp;ldquo;redirect&amp;rdquo;) so that the browser remembers the &amp;ldquo;real&amp;rdquo; route, and that&amp;rsquo;s what the user sees in the URL. It also means that any saved-request mechanisms around authentication in Spring Security would work out of the box, although we won&amp;rsquo;t be taking advantage of that in this application.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: the application in the sample code &lt;a href="https://github.com/dsyer/spring-security-angular/tree/master/modular"&gt;in github&lt;/a&gt; has an extra route, so you can see a slightly more fully featured, and therefore hopefully realistic, application (&amp;ldquo;/home&amp;rdquo; and &amp;ldquo;/message&amp;rdquo; are different modules with slightly different views).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;To complete the application with &amp;ldquo;natural&amp;rdquo; routes, you need to tell Angular about it. There are two steps. First, in &lt;code&gt;hello.js&lt;/code&gt; you add a line to the &lt;code&gt;config&lt;/code&gt; function setting the &amp;ldquo;HTML5 mode&amp;rdquo; in the &lt;code&gt;$locationProvider&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39;, &amp;#39;home&amp;#39;, &amp;#39;navigation&amp;#39; ]).config(&#xD;
&#xD;
  function($locationProvider, $routeProvider, $httpProvider) {&#xD;
&#xD;
    $locationProvider.html5Mode(true);&#xD;
    ...&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Coupled with that you need an extra &lt;code&gt;&amp;lt;base/&amp;gt;&lt;/code&gt; element in the header of the HTML in &lt;code&gt;index.html&lt;/code&gt;, and you need to change the links in the menu bar to remove the fragments (&amp;ldquo;#&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html&amp;gt;&#xD;
&amp;lt;head&amp;gt;&#xD;
&amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;&#xD;
...&#xD;
&amp;lt;/head&amp;gt;&#xD;
&amp;lt;body ng-app=&amp;quot;hello&amp;quot; ng-cloak class=&amp;quot;ng-cloak&amp;quot;&amp;gt;&#xD;
	&amp;lt;div ng-controller=&amp;quot;navigation&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;&#xD;
		&amp;lt;ul class=&amp;quot;nav nav-pills&amp;quot; role=&amp;quot;tablist&amp;quot;&amp;gt;&#xD;
			&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xD;
			&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/login&amp;quot;&amp;gt;login&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xD;
			&amp;lt;li ng-show=&amp;quot;authenticated&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; ng-click=&amp;quot;logout()&amp;quot;&amp;gt;logout&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xD;
		&amp;lt;/ul&amp;gt;&#xD;
	&amp;lt;/div&amp;gt;&#xD;
...&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Angular uses the &lt;code&gt;&amp;lt;base/&amp;gt;&lt;/code&gt; element to anchor the routes and write the URLs that show up in the browser. You are running in a Spring Boot application so the default setting is to serve from root path &amp;ldquo;/&amp;rdquo; (on port 8080). If you need to be able to serve from different root paths with the same application then you will need to render that path into the HTML using a server-side template (many people prefer to stick with static resources for a Single Page Application, so they are stuck with a static root path).&lt;/p&gt;&lt;h2&gt;&lt;a href="#extracting-the-authentication-concerns" class="anchor" name="extracting-the-authentication-concerns"&gt;&lt;/a&gt;Extracting the Authentication Concerns&lt;/h2&gt;&lt;p&gt;When you modularized the application above you should have found that the code worked just by splitting it into modules, but there is a small niggle there that we are still using &lt;code&gt;$rootScope&lt;/code&gt; to share state between the controllers. There&amp;rsquo;s nothing horribly wrong with that for such a small application and it got us a decent prototype to play with quite quickly, so let&amp;rsquo;s not be too sad about it, but now we can take the opportunity to extract all the authentication concerns into a separate module. In Angular terms what you need is a &amp;ldquo;service&amp;rdquo;, so create a new module (&amp;ldquo;auth&amp;rdquo;) next to your &amp;ldquo;home&amp;rdquo; and &amp;ldquo;navigation&amp;rdquo; modules:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;static/&#xD;
  js/&#xD;
    auth/&#xD;
      auth.js&#xD;
    home/&#xD;
      home.js&#xD;
      home.html&#xD;
    navigation/&#xD;
      navigation.js&#xD;
      login.html&#xD;
    hello.js&#xD;
  index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Before writing the &lt;code&gt;auth.js&lt;/code&gt; code we can anticipate the changes in the other modules. First in &lt;code&gt;navigation.js&lt;/code&gt; you should make the &amp;ldquo;navigation&amp;rdquo; module depend on the new &amp;ldquo;auth&amp;rdquo; module, and inject the &amp;ldquo;auth&amp;rdquo; service into the controller (and of course &lt;code&gt;$rootScope&lt;/code&gt; is no longer needed):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;angular.module(&amp;#39;navigation&amp;#39;, [&amp;#39;auth&amp;#39;]).controller(&#xD;
		&amp;#39;navigation&amp;#39;,&#xD;
&#xD;
		function($scope, auth) {&#xD;
&#xD;
			$scope.credentials = {};&#xD;
&#xD;
			$scope.authenticated = function() {&#xD;
				return auth.authenticated;&#xD;
			}&#xD;
&#xD;
			$scope.login = function() {&#xD;
				auth.authenticate($scope.credentials, function(authenticated) {&#xD;
					if (authenticated) {&#xD;
						console.log(&amp;quot;Login succeeded&amp;quot;)&#xD;
						$scope.error = false;&#xD;
					} else {&#xD;
						console.log(&amp;quot;Login failed&amp;quot;)&#xD;
						$scope.error = true;&#xD;
					}&#xD;
				})&#xD;
			};&#xD;
&#xD;
			$scope.logout = function() {&#xD;
              auth.clear();&#xD;
            }&#xD;
&#xD;
		});&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It isn&amp;rsquo;t very different from the old controller (it still needs functions for user actions, login and logout, and an object to hold the credentials for login), but it has abstracted the implementation to the new &amp;ldquo;auth&amp;rdquo; service. The &amp;ldquo;auth&amp;rdquo; service will need an &lt;code&gt;authenticate()&lt;/code&gt; function to support the &lt;code&gt;login()&lt;/code&gt;, and a &lt;code&gt;clear()&lt;/code&gt; function to support &lt;code&gt;logout()&lt;/code&gt;. It also has a flag &lt;code&gt;authenticated&lt;/code&gt; that replaces the &lt;code&gt;$rootScope.authenticated&lt;/code&gt; from the old controller. We use the &lt;code&gt;authenticated&lt;/code&gt; flag in a function with the same name attached to the &lt;code&gt;$scope&lt;/code&gt; of the controller, so that Angular will keep checking its value and update the UI when the user logs in.&lt;/p&gt;&lt;p&gt;Suppose you want to make the &amp;ldquo;auth&amp;rdquo; module re-usable, so you don&amp;rsquo;t want any hard-coded paths in it. That&amp;rsquo;s not a problem, but you will need to initialize or configure the paths in the &lt;code&gt;hello.js&lt;/code&gt; module, so you can add a &lt;code&gt;run()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;angular&#xD;
  .module(&amp;#39;hello&amp;#39;, [ &amp;#39;ngRoute&amp;#39;, &amp;#39;auth&amp;#39;, &amp;#39;home&amp;#39;, &amp;#39;navigation&amp;#39; ])&#xD;
  .config(&#xD;
	...&#xD;
  }).run(function(auth) {&#xD;
&#xD;
    auth.init(&amp;#39;/&amp;#39;, &amp;#39;/login&amp;#39;, &amp;#39;/logout&amp;#39;);&#xD;
&#xD;
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;run()&lt;/code&gt; function can call into any of the modules that &amp;ldquo;hello&amp;rdquo; depends on, in this case injecting an &lt;code&gt;auth&lt;/code&gt; service and initializing it with the paths of the home page, login and logout endpoints respectively.&lt;/p&gt;&lt;p&gt;Now you need to load the &amp;ldquo;auth&amp;rdquo; module in &lt;code&gt;index.html&lt;/code&gt; in addition to the other modules (and before the &amp;ldquo;login&amp;rdquo; module since it depends on &amp;ldquo;auth&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;...&#xD;
&amp;lt;script src=&amp;quot;js/auth/auth.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
...&#xD;
&amp;lt;script src=&amp;quot;js/hello.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then finally you can write the code for the three functions you pencilled in above (&lt;code&gt;authenticate()&lt;/code&gt;, &lt;code&gt;clear()&lt;/code&gt; and &lt;code&gt;init()&lt;/code&gt;). Here&amp;rsquo;s most of the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;auth&amp;#39;, []).factory(&#xD;
    &amp;#39;auth&amp;#39;,&#xD;
&#xD;
    function($http, $location) {&#xD;
&#xD;
      var auth = {&#xD;
&#xD;
        authenticated : false,&#xD;
&#xD;
        loginPath : &amp;#39;/login&amp;#39;,&#xD;
        logoutPath : &amp;#39;/logout&amp;#39;,&#xD;
        homePath : &amp;#39;/&amp;#39;,&#xD;
&#xD;
        authenticate : function(credentials, callback) {&#xD;
&#xD;
          var headers = credentials &amp;amp;&amp;amp; credentials.username ? {&#xD;
            authorization : &amp;quot;Basic &amp;quot;&#xD;
                + btoa(credentials.username + &amp;quot;:&amp;quot;&#xD;
                    + credentials.password)&#xD;
          } : {};&#xD;
&#xD;
          $http.get(&amp;#39;user&amp;#39;, {&#xD;
            headers : headers&#xD;
          }).success(function(data) {&#xD;
            if (data.name) {&#xD;
              auth.authenticated = true;&#xD;
            } else {&#xD;
              auth.authenticated = false;&#xD;
            }&#xD;
            $location.path(auth.homePath);&#xD;
            callback &amp;amp;&amp;amp; callback(auth.authenticated);&#xD;
          }).error(function() {&#xD;
            auth.authenticated = false;&#xD;
            callback &amp;amp;&amp;amp; callback(false);&#xD;
          });&#xD;
&#xD;
        },&#xD;
        &#xD;
        clear : function() { ... },&#xD;
        &#xD;
        init : function(homePath, loginPath, logoutPath) { ... }&#xD;
&#xD;
      };&#xD;
&#xD;
      return auth;&#xD;
&#xD;
    });&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &amp;ldquo;auth&amp;rdquo; module creates a factory for an &lt;code&gt;auth&lt;/code&gt; service (which you already injected into the &amp;ldquo;navigation&amp;rdquo; controller for instance). The factory is just a function that returns an object (&lt;code&gt;auth&lt;/code&gt;), and the object has to have the three functions and the flag that we anticipated above. Above, we have shown an implementation of the &lt;code&gt;authenticate()&lt;/code&gt; function, which is substantially the same as the old one in the &amp;ldquo;navigation&amp;rdquo; controller, it calls out to a backend resource at &amp;ldquo;/user&amp;rdquo;, sets a flag &lt;code&gt;authenticated&lt;/code&gt; and calls an optional callback with the value of the flag. If successful, it also sends the user to the &lt;code&gt;homePath&lt;/code&gt; using the &lt;code&gt;$location&lt;/code&gt; service (we will improve on this in a minute).&lt;/p&gt;&lt;p&gt;Here is a bare-bones implementation of the &lt;code&gt;init()&lt;/code&gt; function that just sets up the various paths you didn&amp;rsquo;t want to hard code in the &amp;ldquo;auth&amp;rdquo; module:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;init : function(homePath, loginPath, logoutPath) {&#xD;
  auth.homePath = homePath;&#xD;
  auth.loginPath = loginPath;&#xD;
  auth.logoutPath = logoutPath;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;clear()&lt;/code&gt; function implementation comes next, but it&amp;rsquo;s rather simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;clear : function() {&#xD;
  auth.authenticated = false;&#xD;
  $location.path(auth.loginPath);&#xD;
  $http.post(auth.logoutPath, {});&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It unsets the &lt;code&gt;authenticated&lt;/code&gt; flag, sends the user back to the login page, and then sends an HTTP POST to the logout path. The POST succeeds because we still have the CSRF protection features from the original &amp;ldquo;single&amp;rdquo; application in place. If you see a 403, look at the error message and server logs, then check that you have that filter in place and the XSRF cookie is being sent.&lt;/p&gt;&lt;p&gt;The very last change is to the &lt;code&gt;index.html&lt;/code&gt; so that the &amp;ldquo;logout&amp;rdquo; link is hidden when the user is not authenticated:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint html"&gt;&amp;lt;html&amp;gt;&#xD;
...&#xD;
&amp;lt;body ng-app=&amp;quot;hello&amp;quot; ng-cloak class=&amp;quot;ng-cloak&amp;quot;&amp;gt;&#xD;
  &amp;lt;div ng-controller=&amp;quot;navigation&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;&#xD;
    &amp;lt;ul class=&amp;quot;nav nav-pills&amp;quot; role=&amp;quot;tablist&amp;quot;&amp;gt;&#xD;
          ...&#xD;
      &amp;lt;li ng-show=&amp;quot;authenticated()&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot; ng-click=&amp;quot;logout()&amp;quot;&amp;gt;logout&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#xD;
    &amp;lt;/ul&amp;gt;&#xD;
  &amp;lt;/div&amp;gt;&#xD;
...&#xD;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You simply need to convert the flag &lt;code&gt;authenticated&lt;/code&gt; to a function call &lt;code&gt;authenticated()&lt;/code&gt;, so that the &amp;ldquo;navigation&amp;rdquo; controller can reach into the &amp;ldquo;auth&amp;rdquo; service and find the value of the flag, now that it is not in &lt;code&gt;$rootScope&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#redirecting-to-the-login-page" class="anchor" name="redirecting-to-the-login-page"&gt;&lt;/a&gt;Redirecting to the Login Page&lt;/h2&gt;&lt;p&gt;The way we have implemented our home page up to now it has some content it can display when the user is anauthenticated (it just invites them to log in). Some applications work that way, and some don&amp;rsquo;t. Some provide a different user experience where the user never sees anything apart from the login page until he is authenticated, so let&amp;rsquo;s see how we might convert our application to this pattern.&lt;/p&gt;&lt;p&gt;Hiding all content with a login page is a classic cross-cutting concern: you don&amp;rsquo;t want all the logic for showing the login page stuck in all the UI modules (it would be duplicated everywhere, making the code harder to read and harder to maintain). Spring Security is all about cross-cutting concerns in the server, since it builds on top of &lt;code&gt;Filters&lt;/code&gt; and AOP interceptors. Unfortunately that won&amp;rsquo;t help us much in a Single Page Application, but fortunately Angular also has some features that make it easy to implement the pattern we want. The feature that helps us here is that you can install a listener for &amp;ldquo;route changes&amp;rdquo;, so every time the user moves to a new route (i.e. clicks on a menu bar or whatever) or when the page loads for the first time, you get to inspect the route and if you need to you can change it.&lt;/p&gt;&lt;p&gt;To install the listener you can write a small piece of extra code in your &lt;code&gt;auth.init()&lt;/code&gt; function (since that is already arranged to run when the main &amp;ldquo;hello&amp;rdquo; module loads):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;angular.module(&amp;#39;auth&amp;#39;, []).factory(&#xD;
    &amp;#39;auth&amp;#39;,&#xD;
&#xD;
    function($rootScope, $http, $location) {&#xD;
&#xD;
      var auth = {&#xD;
      &#xD;
        ...&#xD;
&#xD;
        init : function(homePath, loginPath, logoutPath) {&#xD;
          ...&#xD;
          $rootScope.$on(&amp;#39;$routeChangeStart&amp;#39;, function() {&#xD;
            enter();&#xD;
          });&#xD;
        }&#xD;
&#xD;
      };&#xD;
&#xD;
      return auth;&#xD;
&#xD;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We registered a simple listener which just delegates to a new &lt;code&gt;enter()&lt;/code&gt; function, so now you need to implement that as well in the &amp;ldquo;auth&amp;rdquo; module factory function (where it has access to the factory object itself):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;enter = function() {&#xD;
  if ($location.path() != auth.loginPath) {&#xD;
    auth.path = $location.path();&#xD;
    if (!auth.authenticated) {&#xD;
      $location.path(auth.loginPath);&#xD;
    }&#xD;
  }          &#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The logic is simple: if the path just changed to something other than the login page, then make a record of the path value, and then if the user is not authenticated, go to the login page. The reason we save the path value is so we can go back to it after a successful authentication (Spring Security has this feature server side and it&amp;rsquo;s quite nice for users). You do that in the &lt;code&gt;authenticate()&lt;/code&gt; function by adding some code to the success handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;authenticate : function(credentials, callback) {&#xD;
 ...&#xD;
 $http.get(&amp;#39;user&amp;#39;, {&#xD;
  headers : headers&#xD;
  }).success(function(data) {&#xD;
      ...&#xD;
      $location.path(auth.path==auth.loginPath ? auth.homePath : auth.path);&#xD;
  }).error(...);&#xD;
&#xD;
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On successful authentication we just set the location to either the home page or the most recently selected path (as long as it&amp;rsquo;s not the login page).&lt;/p&gt;&lt;p&gt;There is one final change to make the user experience more uniform: we would like to show the login page instead of the home page when the application first starts up. You already have that logic (redirect to login page) in the &lt;code&gt;authenticate()&lt;/code&gt; function, so all you need to do is add some code in the &lt;code&gt;init()&lt;/code&gt; function to authenticate with empty credentials (which fails unless the user has a cookie already):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint javascript"&gt;init : function(homePath, loginPath, logoutPath) {&#xD;
  ...&#xD;
  auth.authenticate({}, function(authenticated) {&#xD;
    if (authenticated) {&#xD;
      $location.path(auth.path);&#xD;
    }&#xD;
  });&#xD;
  ...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As long as &lt;code&gt;auth.path&lt;/code&gt; is initialized with &lt;code&gt;$location.path()&lt;/code&gt;, this will even work if the user types in a route explicitly into the browser (i.e. doesn&amp;rsquo;t want to load the home page first).&lt;/p&gt;&lt;p&gt;Fire up the application (using your IDE and the &lt;code&gt;main()&lt;/code&gt; method, or on the command line with &lt;code&gt;mvn spring-boot:run&lt;/code&gt;) and visit it at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to see the result.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reminder: be sure to clear your browser cache of cookies and HTTP Basic credentials. In Chrome the best way to do that is to open a new incognito window.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this article we have seen how to modularize an Angular application (taking as a starting point the application from &lt;a href="https://spring.io/blog/2015/01/12/the-login-page-angular-js-and-spring-security-part-ii" title="Second Article in the Series"&gt;Part II&lt;/a&gt; of &lt;a href="https://spring.io/blog/2015/01/12/spring-and-angular-js-a-secure-single-page-application" title="First Article in the Series"&gt;the series&lt;/a&gt;), how to make it redirect to a login page, and how to use &amp;ldquo;natural&amp;rdquo; routes that can be typed or bookmarked easily by users. We took a step back from the last couple of articles in the series, concentrating on the client-side code a bit more, and temporarily ditching the distributed architecture that we were building in Parts III-VI. That doesn&amp;rsquo;t mean that the changes here can&amp;rsquo;t be applied to those other applications (actually it&amp;rsquo;s fairly trivial) - it was just to simplify the server-side code while we were learning how to do things on the client. There &lt;em&gt;were&lt;/em&gt; a couple of server-side features that we used or discussed briefly though (for instance the use of a &amp;ldquo;forward&amp;rdquo; view in Spring MVC to enable &amp;ldquo;natural&amp;rdquo; routes), so we have continued the theme of Angular and Spring working together, and shown that they do so quite well with small tweaks here and there.&lt;/p&gt;&lt;p&gt;The &lt;a href="https://spring.io/blog/2015/05/19/testing-an-angular-application-angular-js-and-spring-security-part-viii"&gt;next part in the series&lt;/a&gt; is about testing the client-side code.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - May 12, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/12/this-week-in-spring-may-12-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-05-13:2119</id>
    <updated>2015-05-12T23:50:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week, I&amp;rsquo;m in Chicago, IL, for &lt;a href="http://gotocon.com/chicago-2015/"&gt;the spectacular GOTO conference, Chicago edition&lt;/a&gt;. &lt;a href="http://twitter.com/starbuxman"&gt;If you&amp;rsquo;re in the Chicago area, ping me on Twitter (@starbuxman)&lt;/a&gt;. Cloud Foundry Summit just wrapped today as 1500 people came together to talk about the community and the technology. Spring made a &lt;a href="https://spring.io/blog/2015/04/14/spring-at-cloud-foundry-summit-may-11-12-2015"&gt;strong showing&lt;/a&gt;, even getting a general session shoutout from James Watters for &lt;a href="https://twitter.com/rohit_ghai/status/598269938021740544"&gt;Spring Boot passing 1 Million downloads&lt;/a&gt; in April.&lt;/p&gt;&lt;p&gt;Now, without further ado.. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Tool Suite ninja Kris De Volder &lt;a href="http://spring.io/blog/2015/05/11/new-in-sts-3-7-0-spring-boot-yaml-editor"&gt;just announced the new support for editing &lt;code&gt;.yml&lt;/code&gt; files in STS&lt;/a&gt; - this is particularly awesome if you&amp;rsquo;re using Spring Boot!&lt;/li&gt;
  &lt;li&gt;Spring IO lead and all-around mad-scientist Andy Wilkinson just &lt;a href="http://spring.io/blog/2015/05/11/gradle-dependency-management-plugin-0-5-1-released"&gt;released the Gradle dependency management plugin 0.5.1.RELEASE&lt;/a&gt;. This plugin brings the power of Maven&amp;rsquo;s &lt;code&gt;dependencyManagement&lt;/code&gt; mechanism to Gradle and makes it easy to create consistent builds.&lt;/li&gt;
  &lt;li&gt;Spring Integration lead &lt;a href="http://spring.io/blog/2015/05/08/spring-amqp-1-4-5-release-and-1-5-0-m1-available"&gt;Gary Russell just released Spring AMQP 1.4.5 and 1.5.0-M1&lt;/a&gt;. The 1.5 series introduces class-level &lt;code&gt;@RabbitListener&lt;/code&gt; annotations (not just method-level ones), auto-declared queues and bindings, configurable exchange/routing Key for replies, a &lt;code&gt;RabbitManagementTemplate&lt;/code&gt; which uses RabbitMQ&amp;rsquo;s REST API bindings, not the hitherto supported Erlang-specific integrations.&lt;/li&gt;
  &lt;li&gt;Did you get a chance to see my webinar on smarter service-to-service invocations with Spring Cloud? If not, &lt;a href="http://spring.io/blog/2015/05/07/webinar-replay-smarter-service-to-service-invocations-with-spring-cloud"&gt;check it out, it&amp;rsquo;s online&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Almost out of SpringOne2GX replays, this week&amp;rsquo;s are out! Check out Owen Rubel talk about &lt;a href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-api-abstraction-and-api-chaining-in-grails"&gt;API Abstraction and API Chaining in Grails&lt;/a&gt;, Fabrice Matrat as he &lt;a href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-dive-into-single-page-application-with-ravejs-and-grails"&gt;Dives into Single-Page Application with RaveJS and Grails&lt;/a&gt;, Hans Dockter gives you some roadmap on &lt;a href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-the-future-of-gradle-the-ultimate-build-system"&gt;The Future of Gradle - The Ultimate Build System&lt;/a&gt; and our friends at JFrog Baruch Sadogursky and Frederic Simon talk about &lt;a href="https://spring.io/blog/2015/05/12/springone2gx-2014-replays-writing-ast-transformations-get-practical-in-90-minutes"&gt;Writing AST Transformations - Get Practical in 90 minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This following blog has very little to do with Spring, but I think it&amp;rsquo;s super important. It&amp;rsquo;s a post I put together that is meant to help the wayward student taking her or his first steps in computer science. I hope it&amp;rsquo;s useful &lt;a href="http://spring.io/blog/2015/05/11/to-my-fellow-students"&gt;and would love feedback, if you&amp;rsquo;ve got something to add&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Turkcell&amp;rsquo;s Erdem Gunay, and our pal, is giving a webinar on June 9th explaining &lt;a href="http://spring.io/blog/2015/05/06/webinar-a-comprehensive-spring-showcase-personal-cloud-storage-application"&gt;how Spring is used in Turkcell&amp;rsquo;s personal cloud service&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The Madrid Groovy User Group publishes their videos and the recent Spanish-language talk, by Pablo Alba, &lt;a href="https://www.youtube.com/watch?v=eVox8LBS2RE"&gt;introduces websockets and Spring Boot&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Niels Bech Nielsen&amp;rsquo;s talk on Spring Boot &lt;a href="https://www.youtube.com/watch?v=W-TXm3oQ9yg"&gt;for microservices looks pretty interesting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QduW8RgKV3o"&gt;Spring Data ninja Thomas Darimont&amp;rsquo;s German-language talk on Spring XD&lt;/a&gt; is up and it looks mighty interesting! (Even if I don&amp;rsquo;t particularly understand the language itself..)&lt;/li&gt;
  &lt;li&gt;Spring Data lead Oliver Gierke&amp;rsquo;s talk on &lt;a href="http://www.infoq.com/presentations/spring-cloud"&gt;Spring Cloud for the MicroExchange conference is also now up and available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Daniel Maas put together a nice blog on &lt;a href="https://objectpartners.com/2015/05/07/intelligent-microservice-metrics-with-spring-boot-and-statsd/"&gt;intelligent microservice metrics with Spring Boot and Statsd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: API Abstraction and API Chaining in Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-api-abstraction-and-api-chaining-in-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-13:2123</id>
    <updated>2015-05-12T23:15:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Owen Rubel &lt;/p&gt;
&lt;p&gt;Essential Grails Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/api-abstraction"&gt;http://www.slideshare.net/SpringCentral/api-abstraction &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;API abstraction is the separation of cross cutting concerns related to the api to better enable externalization to architectural concerns. Not only does this enable easier externalization, synchronization and sharing of the environment with external architecture but this also enables us to reload the api configuration on the fly, have DRY'r code, easier batching, api chaining, reduced code, synchronized configuration/security, reduced throughput and much more.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FuR1xBUdyuE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Dive into Single-Page Application with RaveJS and Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-dive-into-single-page-application-with-ravejs-and-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-13:2122</id>
    <updated>2015-05-12T23:12:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;
&lt;p&gt;Speaker: Fabrice Matrat &lt;/p&gt;
&lt;p&gt;Essential Grails Track&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/dive-into-spa-with-grails-and-rave-js"&gt;http://www.slideshare.net/SpringCentral/dive-into-spa-with-grails-and-rave-js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See how this server-side guy fell in love with client-side application development when he discovered that his years of Grails experience already taught him how to be a great JavaScript developer. We'll explore how advanced architectural libraries, such as cujoJS and RaveJS, provide parallels to many of the concepts you love in Grails.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/dcVG9PQKOso" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: The Future of Gradle - The Ultimate Build System</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/12/springone2gx-2014-replay-the-future-of-gradle-the-ultimate-build-system" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-13:2121</id>
    <updated>2015-05-12T23:07:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Hans Dockter, Gradleware &lt;/p&gt;
&lt;p&gt;More Groovy Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/the-future-of-gradle-the-ultimate-build-system"&gt;http://www.slideshare.net/SpringCentral/the-future-of-gradle-the-ultimate-build-system &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are convinced that Gradle is already the best available enterprise build system. Yet we are far from done. We have finally the R&amp;amp;D bandwidth to deeply improve Gradle in the areas where it lacks. We also have the bandwidth to contribute some fundamental innovation to the domain of build and continuous delivery. All this will bring Gradle much closer to our vision of Gradle being the ultimate build system. We start by giving an overview of where Gradle is currently in the build system market when it comes to features and adoption. We will then talk about the next generation multi-platform dependency management. A dependency management that can fully capture the requirements of Android, JavaScript and the native domain as well as to improve the dependency management for the Java world. We will talk about how Gradle will dramatically improve the performance by introducing global caches and other optimizations. Finally we will talk about the new Gradle extendability model and its upcoming native and Javascript support.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/aumgiP7fHCM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replays: Writing AST Transformations - Get Practical in 90 minutes</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/12/springone2gx-2014-replays-writing-ast-transformations-get-practical-in-90-minutes" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-05-13:2120</id>
    <updated>2015-05-12T23:02:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speakers: Baruch Sadogursky, Frederic Simon - JFrog &lt;/p&gt;
&lt;p&gt;Core Groovy Track &lt;/p&gt;
&lt;p&gt;Slides: none all demo &lt;/p&gt;
&lt;p&gt;You probably know how to use AST transformations. You might although think that writing your own AST transformations is something complicated, and takes deep knowledge of academical compliers, abstract syntax tree and other neat stuff.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/KC3MoRWt13k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>New in STS 3.7.0: Spring Boot Yaml Editor</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/11/new-in-sts-3-7-0-spring-boot-yaml-editor" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Kris De Volder</name>
    </author>
    <id>tag:spring.io,2015-05-11:2117</id>
    <updated>2015-05-11T18:39:11Z</updated>
    <content type="html">&lt;p&gt;In STS 3.6.4 we introduced &lt;a href="https://drive.google.com/open?id=0B-E3P0EgKBcKdE9GY3RiMDZNb0E&amp;authuser=1"&gt;&amp;ldquo;.properties&amp;rdquo; editor support&lt;/a&gt;, for editing Spring Boot configuration properties.&lt;/p&gt;&lt;p&gt;Soon thereafter, people started asking about support for &amp;ldquo;.yml&amp;rdquo; files as well. We are proud to say that the &amp;ldquo;.yml&amp;rdquo; support is now reality.&lt;/p&gt;&lt;p&gt;Check out the &lt;a href="https://docs.google.com/file/d/0B-E3P0EgKBcKdE9GY3RiMDZNb0E/edit"&gt;5 minute video demo&lt;/a&gt; to see this in action:&lt;/p&gt;&lt;p&gt;The Spring Boot Yaml editor is built on top of &lt;a href="https://github.com/oyse/yedit"&gt;YEdit&lt;/a&gt;. STS adds boot-specific content-assist, validation, hover-infos and hyperlink detectors.&lt;/p&gt;&lt;p&gt;It can be tried out today from STS&amp;rsquo;s &lt;a href="https://github.com/spring-projects/spring-ide#installation-ci-builds"&gt;nightly update site&lt;/a&gt; and is planned to be released as part of STS 3.7.0 near the end of June 2015.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Gradle dependency management plugin 0.5.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/11/gradle-dependency-management-plugin-0-5-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-05-11:2116</id>
    <updated>2015-05-11T16:03:30Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;Gradle dependency management plugin&lt;/a&gt; 0.5.1.RELEASE is now available from Maven Central, Bintray, and the Gradle Plugin Portal. For more information about how the plugin can improve your Gradle builds, please read the &lt;a href="https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle"&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This maintenance release fixes an issue with the support for Maven-style exclusions. In addition, 0.5.0 introduced a new task, &lt;code&gt;dependencyManagement&lt;/code&gt;, that you can use to diagnose your project&amp;rsquo;s dependency management. More details can be found in the &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin#dependency-management-task"&gt;project&amp;rsquo;s README&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>To My Fellow Students:</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/11/to-my-fellow-students" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-04-24:2096</id>
    <updated>2015-05-11T00:55:39Z</updated>
    <content type="html">&lt;p&gt;&amp;ldquo;You are always a student, never a master. You have to keep moving forward.&amp;rdquo; -Conrad Hall&lt;/p&gt;&lt;p&gt;&amp;ldquo;The empires of the future are the empires of the mind.&amp;rdquo; -Winston Churchill &lt;/p&gt;&lt;p&gt;&amp;ldquo;You have brains in your head. You have feet in your shoes. You can steer yourself any direction you choose.&amp;rdquo; -Dr. Seuss &lt;/p&gt;&lt;p&gt;&amp;ldquo;Good students are good at all things.&amp;rdquo; -Marissa Mayer &lt;/p&gt;&lt;p&gt;&amp;ldquo;The person who never made a mistake never tried anything new.&amp;rdquo; -Albert Einstein &lt;/p&gt;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: if you&amp;rsquo;re a seasoned developer, than this may not be the post you&amp;rsquo;re looking for. Keep reading, anyway. I&amp;rsquo;ll bet you know some developers who are taking their first steps and, maybe, this could help them!&lt;/p&gt;&lt;p&gt;Hi!. &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;m Josh (@starbuxman)&lt;/a&gt;. I work as &lt;a href="http://spring.io/team/jlong"&gt;the Spring developer advocate&lt;/a&gt; at Pivotal and I, like the rest of the team, spend a lot of time talking to a &lt;em&gt;lot&lt;/em&gt; of really amazing people. We talk to all manner of developers: conference attendees, customers, students, C-levels and interns alike. I personally have made friends on every continent (save Antarctica! One day..) and interacted - online or sometimes in-person - with developers in every timezone. While I enjoy every selfie, hand-shake, discussion, forum thread, Twitter conversation, and email thread, the exchanges that really stick with me are the ones from students. They&amp;rsquo;re often finding their way not just with Spring, but with Java in general and programming at large. They (foolishly!!) assume I have a clue. Those conversations weigh heavily on me. It&amp;rsquo;s very important to not send them off in the wrong direction, if possible. This post is an attempt to capture a lot of these discussions.&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-journey-of-a-thousand-miles" class="anchor" name="a-journey-of-a-thousand-miles"&gt;&lt;/a&gt;A Journey of a Thousand Miles..&lt;/h2&gt;&lt;p&gt;Sometimes students ask about how to get started. I don&amp;rsquo;t even know where to begin. Get started in.. &lt;em&gt;what&lt;/em&gt;? Sometimes I talk to young people trying to start programming. As often as not, these are people who I get introduced to by their parents. These young people know there&amp;rsquo;s a prize - for the inspired it&amp;rsquo;s a life filled with passion and new peaks to summit - waiting for those who make the journey, but they don&amp;rsquo;t know how to take the first steps.&lt;/p&gt;&lt;p&gt;Most of the people I&amp;rsquo;ve talked to started building applications to see something ..dance. In my generation, many of us started with Basic games, and later a lot of developers started with something related to HTML and JavaScript, or even Flash. My first steps in Java were, after all, with Applets! These days, I see a lot of young people taking their first steps with Android or iOS or, even more recently, with Arduino and Minecraft mods. It&amp;rsquo;s encouraging to be able to make something dance. Visual feedback is satisfying, it&amp;rsquo;s encouraging. Put another way, I don&amp;rsquo;t know any young, aspiring programmers who just can&amp;rsquo;t stop thinking about CRON jobs!&lt;/p&gt;&lt;p&gt;There are many outlets for young people to get started with programming. Some of my favorites are Devoxx4Kids, Code.org (_the Hour of Code_) and Coder Dojo.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.devoxx4kids.org/"&gt;Devoxx4Kids&lt;/a&gt; is a non-profit organization that was spun out of the Devoxx conferences and has chapters and events world-wide (though more are &lt;em&gt;always&lt;/em&gt; welcome!). Devoxx4Kids connects qualified adult volunteers, a large and growing set of fun exercises, labs and technologies, and kids to run events worldwide aimed at inspiring young people (teenagers) to take their first steps with people there to help them.&lt;/p&gt;&lt;p&gt;&lt;a href="http://code.org"&gt;Code.org&lt;/a&gt; is a similar movement that has garnered the attention and endorsements of modern-day celebrities like Microsoft founder Bill Gates, Facebook founder Mark Zuckerberg, US president Bill Clinton, and musician Will.i.am to encourage young people to get involved in code. There are educational resources and - every year - the community stages an hour of code event worldwide to encourage young people to write their first lines of code. In 2014, US president Obama participated and wrote his first lines of code in JavaScript! Like Devoxx4Kids, the &lt;em&gt;Hour of Code&lt;/em&gt; movement sees thousands of events and workshops spring up world-wide where young people can go and get help taking their first steps programming.&lt;/p&gt;&lt;p&gt;&lt;a href="https://coderdojo.com/"&gt;Coder Dojo&lt;/a&gt; is a global network of free programming clubs for young people.&lt;/p&gt;&lt;p&gt;&lt;a href="https://www.khanacademy.org/"&gt;Khan Academy&lt;/a&gt; has numerous online learning resources for all manner of subjects, not just computer science. There &lt;em&gt;Computer Programing&lt;/em&gt; section is expansive, though. &lt;/p&gt;&lt;h2&gt;&lt;a href="#what-rsquo-s-beyond-the-horizon" class="anchor" name="what-rsquo-s-beyond-the-horizon"&gt;&lt;/a&gt;What&amp;rsquo;s Beyond the Horizon&lt;/h2&gt;&lt;p&gt;Sometimes I talk to students further down the road, at university perhaps, starting to understand what it means to &lt;em&gt;program&lt;/em&gt; a computer, and now eager to apply their newfound power. For them, it&amp;rsquo;s not about making the conceptual leap into programming, it&amp;rsquo;s about taking the next steps and applying it to some problem space. &lt;/p&gt;&lt;p&gt;I&amp;rsquo;m going to &lt;em&gt;attempt&lt;/em&gt; to lay out the universe of technology as I see it these days and explain what each discipline is. This list isn&amp;rsquo;t even close to exhaustive. It&amp;rsquo;s important to understand that disciplines are not exclusive. Many developers straddle many disciplines and mix-and-match as required. This is the ideal. Program &lt;em&gt;all&lt;/em&gt; the things! Specialization is for insects! Be the &lt;em&gt;Renaissance programmer&lt;/em&gt; the world needs.&lt;/p&gt;&lt;p&gt;This list couldn&amp;rsquo;t possibly be exhaustive and I&amp;rsquo;m happy to have any additions in the comments.&lt;/p&gt;&lt;p&gt;I will also try to link to relevant introductory material and popular technologies in this space. My perspective is of course my own. There are no doubt other resources out there, but I&amp;rsquo;m going with what I know works.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Web Programming&lt;/strong&gt;: This, I think, is the most natural place to start for developers today because &lt;em&gt;everything&lt;/em&gt; is connected to the web. Web programming refers to both the job of creating HTTP-based web applications (like Amazon.com) with pages, forms, etc., and to creating APIs. Humans talk to web applications (usually from a browser) and machines talk to APIs. Today, the most popular way to create APIs is to use REST. Web programming &lt;em&gt;also&lt;/em&gt; refers to the work of &lt;em&gt;consuming&lt;/em&gt; other web services, as you might act as a client to the Facebook API, for example. When people talk about web-development, they&amp;rsquo;re usually talking about things like &lt;a href="http://spring.io/guides/gs/rest-service/"&gt;REST web-services&lt;/a&gt;, &lt;a href="http://spring.io/guides/gs/securing-web/"&gt;web security&lt;/a&gt;, &lt;a href="http://spring.io/guides/tutorials/spring-security-and-angular-js/"&gt;OAuth&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/testing.html"&gt;web testing&lt;/a&gt;, JavaScript, CSS, and APIs. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Front-End &amp;amp; (Rich or Mobile) Client Development&lt;/strong&gt;: For every web application out there, there are an increasing number of screens from which to consume it: Android-based devices, Apple iOS devices, video game consoles, TVs, cars, desktop and mobile browsers, etc. When we talk about front end development that usually, at least, refers to building &lt;a href="http://spring.io/guides/tutorials/spring-security-and-angular-js/"&gt;browser-based JavaScript&lt;/a&gt; and HTML5 applications as well as mobile applications (typically &lt;a href="http://spring.io/guides/gs/consuming-rest-android/"&gt;Android&lt;/a&gt; and &lt;a href="http://spring.io/guides/gs/consuming-rest-ios"&gt;iOS&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SQL Data Processing&lt;/strong&gt;: A diminishing, but still non-trivial, amount of application data is stored in relational databases (RDBMSes) like MySQL and PostgreSQL. These databases use a query language called SQL. You&amp;rsquo;ll find there are myriad technologies to talk to these databases. In the JVM space, one typically uses &lt;a href="http://spring.io/guides/gs/relational-data-access/"&gt;JDBC&lt;/a&gt; and &lt;a href="http://spring.io/guides/gs/accessing-data-jpa/"&gt;JPA&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NoSQL Data Processing&lt;/strong&gt;: RDBMSes may be the entrenched technology, but it&amp;rsquo;s by no means the only way of storing data. Often, application data has specialized storage requirements. Maybe the data is better described not in a set &lt;a href="http://spring.io/guides/gs/accessing-data-jpa/"&gt;of loosely connected tables&lt;/a&gt;, but &lt;a href="http://spring.io/guides/gs/accessing-data-neo4j/"&gt;as a graph of nodes&lt;/a&gt;, or as a series &lt;a href="http://spring.io/guides/gs/accessing-data-mongodb/"&gt;of less rigid &lt;em&gt;documents&lt;/em&gt;&lt;/a&gt;, or perhaps the use cases require the ability to &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch"&gt;do full text searches on the data&lt;/a&gt;. In any case, you&amp;rsquo;ll end up using a so-called &lt;a href="http://en.wikipedia.org/wiki/NoSQL"&gt;&lt;em&gt;Not-only-SQL&lt;/em&gt; or a No-SQL&lt;/a&gt; solution for these sorts of requirements.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Big-Data Processing&lt;/strong&gt;: while RDBMSes may be ubiquitous, and NoSQL may be more efficient or natural for certain types of data, some data sets require specialized processing techniques simply because there is &lt;em&gt;so much&lt;/em&gt; of it. This category of processing is called big-data. There is often overlap between NoSQL and big-data. When we talk about big-data processing, most people think of technologies like &lt;a href="http://projects.spring.io/spring-hadoop/"&gt;Apache Hadoop&lt;/a&gt;, &lt;a href="http://spring.io/guides/gs/yarn-batch-processing/"&gt;YARN&lt;/a&gt;, &lt;a href="https://spring.io/blog/2015/04/15/using-apache-kafka-for-integration-and-data-processing-pipelines-with-spring"&gt;Apache Kafka&lt;/a&gt; and stream-processing solutions &lt;a href="http://spring.io/guides/gs/spring-xd/"&gt;like Spring XD&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;Embedded Development&lt;/strong&gt;: This space is huge, and - I confess - I know very little about it. Today, in 2015, Java and C are very, very popular programming languages. C is 40+ years old, though! It continues to be so popular because it can run in &lt;em&gt;very&lt;/em&gt; tiny computing environments, like watches, alarm clocks, refrigerators, cars, etc. When people talk about embedded development, they may be talking about using Linux, C, and custom microprocessors to build solutions for low-memory footprint devices. My theory is that this domain will decline in popularity over time as even the smaller things in our lives (cars, mobile phones), now have power enough to run more recent programming languages like Java, JavaScript, Groovy, etc.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt;: in 2007, Amazon.com (yes, the book reseller) announced that it was going to make it possible to &lt;em&gt;rent&lt;/em&gt; computers from them by the hour, &lt;em&gt;on-demand&lt;/em&gt;. No human intervention was required, just APIs. It thus became possible to build software that could accommodate so many requests from users and - if demand grew - to dynamically &lt;em&gt;add&lt;/em&gt; more computers and install new software! Since then, the world&amp;rsquo;s changed dramatically, and when we talk about cloud computing today we&amp;rsquo;re talking about how to build applications that are &lt;em&gt;elastic&lt;/em&gt; - they can shrink and grow by adding capacity, dynamically. Imagine for example a website (like Amazon.com!) that has requires many, many more computers during big holidays like Christmas, because vastly more people are buying things. Historically, adding computer capacity meant somebody had to buy new machines, go to the data center and install new machines and operating systems, connect them to the network, etc., etc. Today developers use a layers of software on top of the raw-metal hardware to treat the hardware as a giant pool of resources. For developers and operators to be able to move as quickly as possible to business demand, they need the ability to elastically deploy, manage and scale applications. a Platform-as-a-Service lets you do this. When people talk about cloud computing today, they&amp;rsquo;re probably talking about lower level infrastructure technologies like Amazon Web Services and Docker, and higher-level Platforms-as-a-Service like Heroku, and Pivotal&amp;rsquo;s open-source &lt;a href="http://spring.io/guides/gs/sts-cloud-foundry-deployment/"&gt;Cloud Foundry&lt;/a&gt;. Cloud Foundry is a the whole layer above the infrastructure. Newer versions of Cloud Foundry support runing containerized workloads. One popular container is the aforementioned Docker. If you want to get a taste for what it&amp;rsquo;s like to build, manage and scale containerized workloads on your local desktop machine, check out &lt;a href="http://lattice.cf/docs/getting-started/"&gt;Lattice&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Application Integration&lt;/strong&gt;: as we move forward in time, there&amp;rsquo;s an increasing number of applications and services that have been developed without knowledge of each other. The work of making two otherwise ignorant applications share data and services is called &lt;em&gt;application integration&lt;/em&gt;. There are different ways to handle this chore, but the work typically involves reading, adapting, and writing data between systems. For this one might use enterprise application integration and message-driven architectures, or batch-processing. When we talk about application integration, we&amp;rsquo;re typically talking about technologies like Rendez-Vous, &lt;a href="http://spring.io/guides/gs/messaging-jms/"&gt;JMS&lt;/a&gt;, MQ Series, &lt;a href="http://spring.io/guides/gs/messaging-rabbitmq/"&gt;RabbitMQ&lt;/a&gt;, and &lt;a href="http://spring.io/guides/gs/integration"&gt;Spring Integration&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Internet of Things&lt;/strong&gt;: this is related to embedded development. It&amp;rsquo;s the idea that most devices today can or already do have an IP addresses. They&amp;rsquo;re networked. Examples include alarm clocks, coffee makers, home security systems, and refrigerators. Typically they generate a lot of data (as you might expect 24/7 consumer devices to do) and so it becomes important to use &lt;a href="http://docs.spring.io/spring-integration/reference/html/mqtt.html"&gt;lightweight protocols like MQTT&lt;/a&gt; to manage the traffic.&lt;/p&gt;&lt;p&gt;It&amp;rsquo;s important to understand that these things blend into each other. If you care about scaling application availability with cloud-computing, you&amp;rsquo;ll probably also care about APIs and you&amp;rsquo;ll probably also care about big-data and NoSQL. If you care about APIs, you&amp;rsquo;ll probably also care about how to connect those APIs to client technologies like Android. I&amp;rsquo;ve made these distinctions so you can start.. somewhere! Pick a vertical, for now, but always dare to venture beyond. You&amp;rsquo;ll be rewarded for your curiosity.&lt;/p&gt;&lt;h2&gt;&lt;a href="#always-be-learning" class="anchor" name="always-be-learning"&gt;&lt;/a&gt;Always Be Learning!&lt;/h2&gt;&lt;p&gt;The best engineers start their day under the assumption that they&amp;rsquo;re going to learn something before they get home. If your projects at work are monotonous, then get new projects.&lt;/p&gt;&lt;p&gt;Keep apprised of the latest and greatest news, if you can. There is no end to available resources to read the latest software releases, and watch interesting new published tech talks.&lt;/p&gt;&lt;p&gt;Here are some resources I check everyday before I start working, typically over coffee and lunch:&lt;/p&gt;&lt;p&gt;&lt;a href="http://infoq.com"&gt;InfoQ&lt;/a&gt; is an online tech portal with news on all manner of subjects and technology verticals.&lt;/p&gt;&lt;p&gt;&lt;a href="http://reddit.com"&gt;Reddit&lt;/a&gt; is an amazing place to find all sorts of news, not just on technology. I keep a few different &lt;em&gt;sub-Reddits&lt;/em&gt; bookmarked: &lt;a href="http://reddit.com/r/programming"&gt;programming&lt;/a&gt;, &lt;a href="http://reddit.com/r/java"&gt;Java&lt;/a&gt; for technology. I keep a few others for decidedly &lt;em&gt;non&lt;/em&gt; technical content, too! :D&lt;/p&gt;&lt;p&gt;&lt;a href="http://hackernews.ycombinator.com"&gt;Hacker News&lt;/a&gt; is another (moderated) link aggregator. It typicall provides some pretty deep stuff. I like it as a way of keeping an eye on the &lt;em&gt;edge&lt;/em&gt; of technology.&lt;/p&gt;&lt;p&gt;&lt;a href="http://dzone.com"&gt;DZone&lt;/a&gt; can be nice if you don&amp;rsquo;t mind sifting through the noise to find interesting posts. It&amp;rsquo;s a link aggregator, like Reddit.&lt;/p&gt;&lt;p&gt;&lt;a href="http://virtualjug.com"&gt;the Virtual JUG&lt;/a&gt; is an online &lt;em&gt;virtual&lt;/em&gt; Java User Group that&amp;rsquo;s aired live over YouTube and features experts from around the Java community on a regular basis. Recordings of the talks are available on YouTube afterwards.&lt;/p&gt;&lt;p&gt;&lt;a href="http://github.com/"&gt;GitHub&lt;/a&gt; is an online community for developers to collaborate on code. It builds on the &lt;code&gt;git&lt;/code&gt; source-control and revision system, but integrates issue tracking, collaboration tools, documentation, and much more. It is &lt;em&gt;by-far&lt;/em&gt; the largest community of developers and - my favorite part - there are &lt;em&gt;tons&lt;/em&gt; of great (and some not so great!) open-source code examples on there that you can search for and peruse. Want to get good at programming? Fix some bugs and work on a team. We call that &lt;em&gt;scratching your own itch&lt;/em&gt;. It&amp;rsquo;ll improve your skills, give you valuable experience working with often very-skilled developers, and - if you make any kind of contributions to a project with users - you might possibly make somebody else&amp;rsquo;s day better. Win-win!&lt;/p&gt;&lt;p&gt;&lt;a href="http://stackoverflow.com"&gt;StackOverflow.com&lt;/a&gt; is an question-and-answer forum. Have a question on programing? Chances are someone else already had the same one. Search and behold. Or, if you can&amp;rsquo;t find the right result, ask away. As you start to have the answers, give back by answering other people&amp;rsquo;s questions.&lt;/p&gt;&lt;p&gt;&lt;a href="http://spring.io/blog"&gt;the Spring Blog&lt;/a&gt; If you&amp;rsquo;ll permit me one more plug, we &lt;em&gt;do&lt;/em&gt; publish a lot of blogs on a crazy diverse set of topics, so I hope you&amp;rsquo;ll check this blog out as well ;-)&lt;/p&gt;&lt;h2&gt;&lt;a href="#you-mention-java-a-lot" class="anchor" name="you-mention-java-a-lot"&gt;&lt;/a&gt;You Mention Java a Lot..&lt;/h2&gt;&lt;p&gt;I work with the Java language, which runs on top of the Java Virtual Machine. Java is a boring little language, I think, for the better. It lends itself to novices who want to start building things, and not struggling with the syntax. It helps the experienced too because it&amp;rsquo;s fairly consistent to read. I, personally, quite like Java. It&amp;rsquo;s expressive enough while still being easy enough to pickup and read. Whether you like Java the language or not, however, everybody agrees that the JVM (as a platform) is second-to-none. Virtually all the big-web giants (Twitter, Netflix, Google, eBay, Amazon.com, Yahoo!, etc) use the JVM in a majority capacity. The JVM is battle tested and well established. T&lt;/p&gt;&lt;p&gt;here are always alternatives, of course, but it should not be surprising that getting started in big-data, NoSQL, cloud-computing, mobile development, web APIs and more all require some proficiency of the JVM. If you don&amp;rsquo;t like the Java language (though, you should try Java 8! You might like it..), there are &lt;em&gt;plenty&lt;/em&gt; of mature alternatives like &lt;a href="http://www.groovy-lang.org/"&gt;Groovy&lt;/a&gt;, Scala, Clojure (Lisp on the JVM), &lt;a href="http://jruby.org"&gt;JRuby&lt;/a&gt; (Ruby on the JVM), Jython (Python on the JVM), Kotlin, and Ceylon, all of which run on the JVM. That&amp;rsquo;s right - you get the most powerful language runtime in the world, in the language flavor of your choice.&lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;&lt;p&gt;This whole blog has been about next steps. Congratulations on taking the first steps! You&amp;rsquo;ll make a lot of friends, solve a lot of interesting problems, and have a lot of fun if you put your mind to it. &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.4.5.RELEASE and 1.5.0.M1 Available</title>
    <link rel="alternate" href="https://spring.io/blog/2015/05/08/spring-amqp-1-4-5-release-and-1-5-0-m1-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2015-05-07:2114</id>
    <updated>2015-05-08T08:02:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that the latest maintenance release for Spring AMQP (1.4.5.RELEASE) is now available. This contains just a &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10450&amp;version=14993"&gt;few bug fixes since 1.4.4&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In addition, the first milestone release for the 1.5 release is also available (1.5.0.M1). A release candidate will be available in a month or so, with the GA expected later in the summer.&lt;/p&gt;&lt;p&gt;The main features of this release are highlighted below:&lt;/p&gt;&lt;h2&gt;&lt;a href="#class-level-code-rabbitlistener-code" class="anchor" name="class-level-code-rabbitlistener-code"&gt;&lt;/a&gt;Class-level &lt;code&gt;@RabbitListener&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It is now possible to define the &lt;code&gt;@RabbitListener&lt;/code&gt; annotation at the class level. Together with method-level &lt;code&gt;@RabbitHandler&lt;/code&gt; annotations, this allows a single listener to invoke different methods in the class, depending on the payload type. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RabbitListener(queues=&amp;quot;orders, shipments&amp;quot;)&#xD;
public class MultiListenerBean {&#xD;
&#xD;
    @RabbitHandler&#xD;
    public OrderConfirmation handleOrder(Order order) {&#xD;
        ...    &#xD;
    }&#xD;
&#xD;
    @RabbitHandler&#xD;
    public Invoice ship(Shipment shipment) {&#xD;
        ...&#xD;
    }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#auto-declare-queues-and-bindings-for-code-rabbitlistener-code" class="anchor" name="auto-declare-queues-and-bindings-for-code-rabbitlistener-code"&gt;&lt;/a&gt;Auto-Declare Queues and Bindings for &lt;code&gt;@RabbitListener&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;It is now possible to automatically declare queues, exchanges and bindings when using the &lt;code&gt;@RabbitListener&lt;/code&gt; annotation.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RabbitListener(bindings = @QueueBinding(&#xD;
	value = @Queue(value = &amp;quot;auto.declare&amp;quot;, autoDelete = &amp;quot;true&amp;quot;),&#xD;
	exchange = @Exchange(value = &amp;quot;auto.exch&amp;quot;, autoDelete = &amp;quot;true&amp;quot;),&#xD;
	key = &amp;quot;auto.rk&amp;quot;))&#xD;
public String handleWithDeclare(String foo) {&#xD;
	return foo.toUpperCase();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, the queue &lt;code&gt;auto.declare&lt;/code&gt; is declared and bound to exchange &lt;code&gt;auto.exch&lt;/code&gt; with routing key &lt;code&gt;auto.rk&lt;/code&gt;. The exchange is declared too.&lt;/p&gt;&lt;p&gt;Previously, the &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Exchange&lt;/code&gt; and &lt;code&gt;Binding&lt;/code&gt; had to be declared as separate &lt;code&gt;@Bean&lt;/code&gt;s.&lt;/p&gt;&lt;h2&gt;&lt;a href="#configurable-exchange-routing-key-for-replies" class="anchor" name="configurable-exchange-routing-key-for-replies"&gt;&lt;/a&gt;Configurable Exchange/Routing Key for Replies&lt;/h2&gt;&lt;p&gt;Previously, when using request/reply messaging with the &lt;code&gt;RabbitTemplate&lt;/code&gt;, replies were routed to the default exchange and routed with the queue name. It is now possible to supply a &lt;code&gt;reply-address&lt;/code&gt; with the form &lt;code&gt;exchange/routingKey&lt;/code&gt; to route using a specific exchange and routing key.&lt;/p&gt;&lt;h2&gt;&lt;a href="#rabbitmanagementtemplate" class="anchor" name="rabbitmanagementtemplate"&gt;&lt;/a&gt;RabbitManagementTemplate&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;spring-erlang&lt;/code&gt; jar is no longer provided. Users are encouraged to use the RabbitMQ REST API instead. The RabbitMQ team are working on a Java binding for the REST API and Spring AMQP now provides a lightweight wrapper for that API using the familiar &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Exchange&lt;/code&gt; and &lt;code&gt;Binding&lt;/code&gt; domain objects.&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Complete details of the new features can be found in the &lt;a href="http://docs.spring.io/spring-amqp/docs/1.5.0.M1/reference/html/_introduction.html#_changes_in_1_5_since_1_4"&gt;What&amp;rsquo;s New section of the reference manual&lt;/a&gt; and the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10450&amp;version=14837"&gt;JIRA release notes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Users are encouraged to try the new features before the GA release and provide feedback using the normal channels (&lt;code&gt;spring-amqp&lt;/code&gt; tag on Stack Overflow, and JIRA).&lt;/p&gt;&lt;p&gt;See &lt;a href="http://projects.spring.io/spring-amqp/"&gt;the project page&lt;/a&gt; for links to documentation and downloads.&lt;/p&gt;</content>
  </entry>
</feed>

